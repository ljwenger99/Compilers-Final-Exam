int c = 1;
int d = 89;

int sum(int a, int b) {
	return a + b + c;
	return a;
}

void complicated(int a, int b) {
	print(d - c * c);
}

str greet(str h) {
	str n;
	print("Hi. What's your name? ");
	read(n);
	return h + " " + n;
}

void main() {
	print("a");
	print("b");
	c = 6;
	int d = sum(3, 5);
	print("The sum is ");
	print(d);
	print("\n");
	complicated(d, c);
	print(greet("\nHello "));
}

/* C-- Grammar

TYPE ::= int|str|void
ID ::= [a-zA-Z_][a-zA-Z0-9_]*
STRING ::= \"([^"]|\"\")*\"
INTEGER ::= [0-9]+

program ::= declarations DONE
declarations ::= declaration { declaration }
declaration ::= vardecl | funcdecl
gvardecl ::= TYPE ID [ "=" ( INTEGER | STRING ) ] ";" 
funcdecl ::= TYPE ID "(" [ TYPE ID { "," TYPE ID } ] ")" block
block ::= "{" { stmt ";" } "}"

stmt ::= "print" "(" expr ")"
stmt ::= "read" "(" ID ")"
stmt ::= "return" expr
stmt ::= TYPE ID [ "=" expr ]
stmt ::= ID "=" expr
stmt ::= call

expr ::= INTEGER | STRING | ID
expr ::= "~" expr
expr ::= expr "+" expr
expr ::= expr "-" expr
expr ::= expr "*" expr
expr ::= expr "/" expr
expr ::= call

call ::= ID "(" [ expr { "," expr } ] ")" 


Notes: 
	This is not an object-oriented language. There are no vtables or classes.
	There are global variables and global function definitions.
	Global variables can only be initialized to literal values.
	A single namespace for variables and function names. Also can't use keywords.
	There can be local variables and they are in scope only after being declared.
	The + operator can concatenate strings.
	The print and read procedures only take one integer or string parameter.
	The normal algebraic operation precedence rules apply.
	A function with no return must be void. Variables may not be declared as type void.
	There must be a main function returning type void.
	Only functions with a void type can be called as statements.
	Functions with a void type can not be called in expressions.
*/